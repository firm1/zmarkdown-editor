/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package zmarkdown.javaeditor.ihm;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.tree.DefaultMutableTreeNode;
import zmarkdown.javaeditor.Chapter;
import zmarkdown.javaeditor.EMarkdown;
import zmarkdown.javaeditor.Extract;
import zmarkdown.javaeditor.Part;
import zmarkdown.javaeditor.Tutorial;

/**
 *
 * @author firm1
 */
public class Editor extends javax.swing.JFrame{

    private Tutorial tutorial;
    EMarkdown md;
    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        md=new EMarkdown();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuOpen = new javax.swing.JMenuItem();
        menuSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuQuit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setFont(new java.awt.Font("Cantarell", 0, 14)); // NOI18N
        jPanel2.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Fichiers", jPanel2);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        menuFile.setText("Fichier");

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setText("Ouvrir");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuOpen);

        menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave.setText("Enregistrer");
        menuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuSave);
        menuFile.add(jSeparator1);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Fermer l'onglet");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuFile.add(jMenuItem1);

        menuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menuQuit.setText("Quitter");
        menuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuQuitActionPerformed(evt);
            }
        });
        menuFile.add(menuQuit);

        jMenuBar1.add(menuFile);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveActionPerformed
        JPanel now=(JPanel)jTabbedPane1.getSelectedComponent();
        for (Component component:now.getComponents()) {
            if (component instanceof JSplitPane){
                JSplitPane split = (JSplitPane) component;
                for (Component spcomp:split.getComponents()) {
                    if (spcomp instanceof JScrollPane){
                        JScrollPane scroll = (JScrollPane) spcomp;
                        JViewport pack = scroll.getViewport();
                        for (Component sp:pack.getComponents()) {
                            if (sp instanceof Source){
                                Source source = (Source) sp;
                                source.saveFile();
                            }
                        }
                    }
                    
                    
                }
            }
        }
    }//GEN-LAST:event_menuSaveActionPerformed


    public void initEditor(JPanel panel, DefaultMutableTreeNode node)
    {
        String path = tutorial.getPath()+File.separator+mappingRowFile.get(node);
        JSplitPane spliter = new JSplitPane();
        spliter.setResizeWeight(.5d);
        JScrollPane scrollLeft = new JScrollPane();
        scrollLeft.setBorder(BorderFactory.createTitledBorder(BorderFactory.createTitledBorder("Texte de zMarkdown")));

        Source textarea = new Source(path);
        scrollLeft.setViewportView(textarea);
        JScrollPane scrollRight = new JScrollPane();
        scrollRight.setBorder(BorderFactory.createTitledBorder(BorderFactory.createTitledBorder("Rendu Final")));

        Render textpane = new Render(md);
        textarea.register(textpane);
        textpane.setObservable(textarea);
        scrollRight.setViewportView(textpane);

        spliter.setLeftComponent(scrollLeft);
        spliter.setRightComponent(scrollRight);
        
        panel.add(spliter, java.awt.BorderLayout.CENTER);
        
        // chargement du contenu des fichiers
        StringBuilder chaine=new StringBuilder();
        try {
            Scanner scanner=new Scanner(new File(path));
            // On boucle sur chaque champ detect√©
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();

                chaine.append(line);
                chaine.append('\n');
            }
            scanner.close();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        textarea.setText(chaine.toString());
        textpane.update();
    }
    public void actualiseTree()
    {
        if (tutorial != null) {
            mappingRowFile = new HashMap<DefaultMutableTreeNode, String>();
            mappingRowTitle = new HashMap<DefaultMutableTreeNode, String>();
            mappingRowPanel = new HashMap<DefaultMutableTreeNode, JPanel>();
            tree = new JTree();
            DefaultMutableTreeNode racine = new DefaultMutableTreeNode(tutorial.getTitle()) ;
            if (tutorial.getParts().size()>0) {
                DefaultMutableTreeNode ti_node=new DefaultMutableTreeNode("Introduction", false);
                mappingRowFile.put(ti_node, "introduction.md");
                mappingRowTitle.put(ti_node, "Introduction");
                racine.add(ti_node);
                for (Part part:tutorial.getParts())
                {
                    DefaultMutableTreeNode p_node=new DefaultMutableTreeNode(part.getTitle());
                    DefaultMutableTreeNode pi_node=new DefaultMutableTreeNode("Introduction", false);
                    mappingRowFile.put(pi_node, part.getPathIntroduction());
                    mappingRowTitle.put(pi_node, "Introduction");
                    p_node.add(pi_node);
                    for (Chapter chapter:part.getChapters()) {
                        DefaultMutableTreeNode c_node=new DefaultMutableTreeNode(chapter.getTitle());
                        DefaultMutableTreeNode ci_node=new DefaultMutableTreeNode("Introduction", false);
                        mappingRowFile.put(ci_node, chapter.getPathIntroduction());
                        mappingRowTitle.put(ci_node, "Introduction");
                        c_node.add(ci_node);
                        for (Extract extract:chapter.getExtracts()) {
                            DefaultMutableTreeNode e_node=new DefaultMutableTreeNode(extract.getTitle(), false);
                            mappingRowFile.put(e_node, extract.getPathText());
                            mappingRowTitle.put(e_node, extract.getTitle());
                            c_node.add(e_node);
                        }
                        DefaultMutableTreeNode cc_node=new DefaultMutableTreeNode("Conclusion", false);
                        mappingRowFile.put(cc_node, chapter.getPathConclusion());
                        mappingRowTitle.put(cc_node, "Conclusion");
                        c_node.add(cc_node);
                        p_node.add(c_node);
                    }
                    DefaultMutableTreeNode pc_node=new DefaultMutableTreeNode("Conclusion", false);
                    mappingRowFile.put(pc_node, part.getPathConclusion());
                    mappingRowTitle.put(pc_node, "Conclusion");
                    p_node.add(pc_node);
                    racine.add(p_node);
                }
                DefaultMutableTreeNode tc_node=new DefaultMutableTreeNode("Conclusion", false);
                mappingRowFile.put(tc_node, "conclusion.md");
                mappingRowTitle.put(tc_node, "Conclusion");
                racine.add(tc_node);
            }
            if (tutorial.getChapter()!=null)
            {   
                DefaultMutableTreeNode i_node=new DefaultMutableTreeNode("Introduction", false);
                mappingRowFile.put(i_node, "introduction.md");
                mappingRowTitle.put(i_node, "Introduction");
                racine.add(i_node);
                for (Extract extract:tutorial.getChapter().getExtracts()) {
                    DefaultMutableTreeNode e_node=new DefaultMutableTreeNode(extract.getTitle(), false);
                    mappingRowFile.put(e_node, extract.getPathText());
                    mappingRowTitle.put(e_node, extract.getTitle());
                    racine.add(e_node);
                }
                DefaultMutableTreeNode c_node=new DefaultMutableTreeNode("Conclusion", false);
                mappingRowFile.put(c_node, "conclusion.md");
                mappingRowTitle.put(c_node, "Conclusion");
                racine.add(c_node);
            }
            tree = new JTree(racine);
            this.jPanel2.add(new JScrollPane(tree));
            
            MouseListener ml = new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    DefaultMutableTreeNode node=(DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
                    if (node != null && e.getClickCount()==2 && node.getChildCount()==0) {
                        if (!mappingRowPanel.containsKey(node)){
                            JPanel pan=new JPanel();
                            pan.setLayout(new java.awt.BorderLayout());
                            jTabbedPane1.addTab(mappingRowTitle.get(node), pan);
                            jTabbedPane1.revalidate();
                            initEditor(pan, node);
                            mappingRowPanel.put(node, pan);
                        }
                        jTabbedPane1.setSelectedComponent(mappingRowPanel.get(node));
                    }
                }
            };
            tree.addMouseListener(ml);
        }
    }
    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        JFileChooser dialog = new JFileChooser(new File("."));
	dialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	if (dialog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
	    File file = dialog.getSelectedFile();
            tutorial = new Tutorial(file.getAbsolutePath());
            tutorial.initMetadata();
            actualiseTree();
	}
    }//GEN-LAST:event_menuOpenActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (jTabbedPane1.getSelectedIndex()>0) {
            jTabbedPane1.remove(jTabbedPane1.getSelectedComponent());
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuQuitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }
    public JTree tree;
    private Map<DefaultMutableTreeNode, String> mappingRowFile;
    private Map<DefaultMutableTreeNode, String> mappingRowTitle;
    private Map<DefaultMutableTreeNode, JPanel> mappingRowPanel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuQuit;
    private javax.swing.JMenuItem menuSave;
    // End of variables declaration//GEN-END:variables
}
